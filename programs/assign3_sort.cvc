extern void printInt(int val);
extern void printSpaces(int num);
extern void printNewlines(int num);

extern int scanInt();

export int main()
{
	int len = scanPositiveInt();
	int[len] vct;
	
	void scan_vector()
	{
		for (int i = 0, len)
		{
			vct[i] = scanInt();
		}
	}
	
	void print_vector()
	{
		for (int i = 0, len)
		{
			printInt(vct[i]);
			printSpaces(1);
		}
		printNewlines(1);
	}
	
	void sort_vector()
	{
		quicksort(vct, 0, len - 1);
	}
	
	printInt(len);
	printNewlines(2);
	
	scan_vector();
	printNewlines(1);
	print_vector();
	
	printNewlines(2);
	
	sort_vector();
	print_vector();
	
	return 0;
}

/* The quicksort() function sorts a (section of a) vector in place. The elements
 * [left, right] (both sides inclusive) are partitioned into two sections, 
 * where the first section contains elements which are all lower than all the 
 * elements in the second section. These sections are then quicksorted. */
void quicksort(int[len] vct, int left, int right)
{
	int pivot;
	
	if (left < right)
	{
		pivot = partition(vct, left, right);
		quicksort(vct, left, pivot - 1);
		quicksort(vct, pivot + 1, right);
	}
}

/* Partition() chooses a value as a pivot. It then proceeds to move the elements
 * smaller or equal to the pivotvalue to the left; that is, at any point all
 * elements before key are smaller or equal to the pivotvalue, and when done,
 * all the elements that are not before key, are thus higher than pivotvalue.
 * Then the pivot is swapped to key and is in exactly the right spot. */
int partition(int[len] vct, int left, int right)
{
	int pivot = left + (right - left) / 2;
	int pivotvalue = vct[pivot];
	int key = left;
	
	void swap(int a, int b)
	{
		int tmp = vct[a];
		vct[a] = vct[b];
		vct[b] = tmp;
	}
	
	swap(pivot, right);
	
	for (int i = left, right)
	{
		if (vct[i] <= pivotvalue)
		{
			if (i != key)
			{
				swap(i, key);
			}
			key = key + 1;
		}
	}
	
	swap(key, right);
	return key;
}

/* Little wrapper. */
int scanPositiveInt()
{
	int n = scanInt();
	if (n < 1)
	{
		n = 1;
	}
	return n;
}
